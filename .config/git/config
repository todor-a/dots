
[user]
	name = Todor Andonov
	email = todor.andonov@payhawk.com
	signingkey = D846E789
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[init]
	defaultBranch = master
[push]
	autoSetupRemote = true
[core]
	excludesFile = ~/config/git/.gitignore
[rebase]
	autoStash = true
[color]
	diff = auto
	status = auto
	branch = auto
[commit]
	gpgsign = true
[gpg]
	program = /opt/homebrew/bin/gpg
[alias]
	c = checkout
	a = add
	aa = add .
    main-branch = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4
    com = "!f(){ git checkout $(git main-branch) $@;}; f"

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Checkout a pull request from origin (of a github repository)
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

    # list all aliases
	alias=!git config -l | grep ^alias | cut -c 7- | sort

    # clear node_modules
    cl = clean -dfx -e node_modules

	save = !git add -A && git commit -m 'SAVEPOINT'

	wip = !git add -u && git commit -mWIP

    cm = commit -a

	cam = "!f() { git add -A && git commit -m \"$*\"; }; f"

    undo = !git reset HEAD~1 --mixed

    discard = reset --hard HEAD

    discard-all = clean -fd

    reset-branch = !git reset $(git merge-base $(git main-branch) $(git branch --show-current))